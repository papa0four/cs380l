Binary files aos_pintos/src/lib/build/devices/block.o and pintos_solution/src/lib/build/devices/block.o differ
Binary files aos_pintos/src/lib/build/devices/ide.o and pintos_solution/src/lib/build/devices/ide.o differ
Binary files aos_pintos/src/lib/build/devices/input.o and pintos_solution/src/lib/build/devices/input.o differ
Binary files aos_pintos/src/lib/build/devices/intq.o and pintos_solution/src/lib/build/devices/intq.o differ
Binary files aos_pintos/src/lib/build/devices/kbd.o and pintos_solution/src/lib/build/devices/kbd.o differ
Binary files aos_pintos/src/lib/build/devices/partition.o and pintos_solution/src/lib/build/devices/partition.o differ
Binary files aos_pintos/src/lib/build/devices/pit.o and pintos_solution/src/lib/build/devices/pit.o differ
Binary files aos_pintos/src/lib/build/devices/rtc.o and pintos_solution/src/lib/build/devices/rtc.o differ
Binary files aos_pintos/src/lib/build/devices/serial.o and pintos_solution/src/lib/build/devices/serial.o differ
Binary files aos_pintos/src/lib/build/devices/shutdown.o and pintos_solution/src/lib/build/devices/shutdown.o differ
Binary files aos_pintos/src/lib/build/devices/speaker.o and pintos_solution/src/lib/build/devices/speaker.o differ
Binary files aos_pintos/src/lib/build/devices/timer.o and pintos_solution/src/lib/build/devices/timer.o differ
Binary files aos_pintos/src/lib/build/devices/vga.o and pintos_solution/src/lib/build/devices/vga.o differ
Binary files aos_pintos/src/lib/build/kernel.bin and pintos_solution/src/lib/build/kernel.bin differ
Binary files aos_pintos/src/lib/build/kernel.o and pintos_solution/src/lib/build/kernel.o differ
Binary files aos_pintos/src/lib/build/lib/arithmetic.o and pintos_solution/src/lib/build/lib/arithmetic.o differ
Binary files aos_pintos/src/lib/build/lib/debug.o and pintos_solution/src/lib/build/lib/debug.o differ
Binary files aos_pintos/src/lib/build/lib/kernel/bitmap.o and pintos_solution/src/lib/build/lib/kernel/bitmap.o differ
Binary files aos_pintos/src/lib/build/lib/kernel/console.o and pintos_solution/src/lib/build/lib/kernel/console.o differ
Binary files aos_pintos/src/lib/build/lib/kernel/debug.o and pintos_solution/src/lib/build/lib/kernel/debug.o differ
Binary files aos_pintos/src/lib/build/lib/kernel/hash.o and pintos_solution/src/lib/build/lib/kernel/hash.o differ
Binary files aos_pintos/src/lib/build/lib/kernel/list.o and pintos_solution/src/lib/build/lib/kernel/list.o differ
Binary files aos_pintos/src/lib/build/lib/random.o and pintos_solution/src/lib/build/lib/random.o differ
Binary files aos_pintos/src/lib/build/lib/stdio.o and pintos_solution/src/lib/build/lib/stdio.o differ
Binary files aos_pintos/src/lib/build/lib/stdlib.o and pintos_solution/src/lib/build/lib/stdlib.o differ
Binary files aos_pintos/src/lib/build/lib/string.o and pintos_solution/src/lib/build/lib/string.o differ
Binary files aos_pintos/src/lib/build/lib/ustar.o and pintos_solution/src/lib/build/lib/ustar.o differ
Binary files aos_pintos/src/lib/build/loader.bin and pintos_solution/src/lib/build/loader.bin differ
Binary files aos_pintos/src/lib/build/tests/lib/listfunctests.o and pintos_solution/src/lib/build/tests/lib/listfunctests.o differ
Binary files aos_pintos/src/lib/build/threads/init.o and pintos_solution/src/lib/build/threads/init.o differ
Binary files aos_pintos/src/lib/build/threads/interrupt.o and pintos_solution/src/lib/build/threads/interrupt.o differ
Binary files aos_pintos/src/lib/build/threads/intr-stubs.o and pintos_solution/src/lib/build/threads/intr-stubs.o differ
Binary files aos_pintos/src/lib/build/threads/loader.o and pintos_solution/src/lib/build/threads/loader.o differ
Binary files aos_pintos/src/lib/build/threads/malloc.o and pintos_solution/src/lib/build/threads/malloc.o differ
Binary files aos_pintos/src/lib/build/threads/palloc.o and pintos_solution/src/lib/build/threads/palloc.o differ
Binary files aos_pintos/src/lib/build/threads/start.o and pintos_solution/src/lib/build/threads/start.o differ
Binary files aos_pintos/src/lib/build/threads/switch.o and pintos_solution/src/lib/build/threads/switch.o differ
Binary files aos_pintos/src/lib/build/threads/synch.o and pintos_solution/src/lib/build/threads/synch.o differ
Binary files aos_pintos/src/lib/build/threads/thread.o and pintos_solution/src/lib/build/threads/thread.o differ
diff -ruN aos_pintos/src/lib/kernel/list.c pintos_solution/src/lib/kernel/list.c
--- aos_pintos/src/lib/kernel/list.c	2024-01-30 21:43:54.000000000 +0000
+++ pintos_solution/src/lib/kernel/list.c	2024-02-02 19:36:07.466310745 +0000
@@ -1,5 +1,6 @@
 #include "list.h"
 #include "../debug.h"
+#include "../../threads/thread.h"
 
 /* Our doubly linked lists have two header elements: the "head"
    just before the first element and the "tail" just after the
@@ -161,13 +162,7 @@
   elem->prev = before->prev;
   elem->next = before;
   before->prev->next = elem;
-  before->prev = elem;
-}
-
-/* Removes elements FIRST though LAST (exclusive) from their
-   current list, then inserts them just before BEFORE, which may
-   be either an interior element or a tail. */
-void list_splice (struct list_elem *before, struct list_elem *first,
+  before->prev = elem;occurranceelem *first,
                   struct list_elem *last)
 {
   ASSERT (is_interior (before) || is_tail (before));
@@ -311,13 +306,6 @@
     }
 }
 
-int get_sorted_index (struct list *threads, struct thread *target) {
-  /* Your implementation here */
-  (void) threads;
-  (void) target;
-  return 0;
-}
-
 /* Returns true only if the list elements A through B (exclusive)
    are in order according to LESS given auxiliary data AUX. */
 static bool is_sorted (struct list_elem *a, struct list_elem *b,
@@ -347,7 +335,8 @@
   do
     {
       a = list_next (a);
-  } while (a != b && !less (a, list_prev (a), aux));
+    }
+  while (a != b && !less (a, list_prev (a), aux));
   return a;
 }
 
@@ -411,7 +400,8 @@
           /* Merge the runs. */
           inplace_merge (a0, a1b0, b1, less, aux);
         }
-  } while (output_run_cnt > 1);
+    }
+  while (output_run_cnt > 1);
 
   ASSERT (is_sorted (list_begin (list), list_end (list), less, aux));
 }
@@ -495,3 +485,49 @@
     }
   return min;
 }
+
+bool comparator (const struct list_elem * a, const struct list_elem * b, void * aux)
+{
+    if ((NULL == a) ||
+        (NULL == b) ||
+        (NULL == aux))
+    {
+        return false;
+    }
+
+    struct thread * p_thread_a = list_entry(a, struct thread, allelem);
+    struct thread * p_thread_b = list_entry(b, struct thread, allelem);
+    return p_thread_a->tid < p_thread_b->tid;
+}
+
+int get_sorted_index (struct list * threads, struct thread * target)
+{
+    if ((NULL == threads) ||
+        (NULL == target))
+    {
+        return -1;
+    }
+
+    struct list_elem * p_entry   = list_begin(threads);
+    struct thread    * p_head    = list_entry(p_entry, struct thread, allelem);
+
+    list_sort(threads, comparator, &p_head->tid);
+
+    int index = 0;
+    struct list_elem * p_elem = NULL;
+
+    for (p_elem = list_begin(threads); list_end(threads) != p_elem; p_elem = list_next(p_elem))
+    {
+        struct thread * p_current = list_entry(p_elem, struct thread, allelem);
+        if (target->tid == p_current->tid)
+        {
+            return index;
+        }
+
+        index++;
+    }
+
+    return -1;
+}
+
+/* end of list.c */
diff -ruN aos_pintos/src/lib/kernel/list.h pintos_solution/src/lib/kernel/list.h
--- aos_pintos/src/lib/kernel/list.h	2024-01-30 21:41:46.000000000 +0000
+++ pintos_solution/src/lib/kernel/list.h	2024-02-02 19:31:10.271437241 +0000
@@ -86,6 +86,7 @@
 #include <stddef.h>
 #include <stdint.h>
 
+/* thread struct */
 struct thread;
 
 /* List element. */
@@ -161,7 +162,6 @@
 
 /* Miscellaneous. */
 void list_reverse (struct list *);
-int get_sorted_index (struct list *threads, struct thread *target);
 
 /* Compares the value of two list elements A and B, given
    auxiliary data AUX.  Returns true if A is less than B, or
@@ -180,4 +180,26 @@
 struct list_elem *list_max (struct list *, list_less_func *, void *aux);
 struct list_elem *list_min (struct list *, list_less_func *, void *aux);
 
+/* comparator && get_sorted_index */
+/**
+ * @brief - compares two elements' values to aid in the sorting of the list
+ * @param a - (const struct list_elem *) a pointer to the first list element
+ * @param b - (const struct list_elem *) a pointer to the second list element
+ * @param aux - (void *) a pointer to hold the data value of the list element to base comparison
+ * @return - if the value of a is < b, this function will return true (or 1). If the value
+ *           of a is > or = to b, this function will return false (or 0).
+*/
+bool comparator (const struct list_elem * a, const struct list_elem * b, void * aux);
+
+/**
+ * @brief - takes in a list of elements, sorts the data, and uses the passed target to 
+ *          determine the location of a specific element within the list (post sort).
+ * @param threads - (struct list *) a pointer to the list structure containing all the data
+ * @param target - (struct thread *) a pointer to the target data to find within the sorted list
+ * @return - upon successful location of a specific element, this function will return the
+ *           index value. Upon error or if the targeted index does not exist in the list, this
+ *           function will return -1, indicating an error has occurred. 
+*/
+int get_sorted_index (struct list * threads, struct thread * target);
+
 #endif /* lib/kernel/list.h */
